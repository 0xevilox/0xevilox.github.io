
var documents = [{
    "id": 0,
    "url": "http://localhost:4000/0xevilox-blog/404.html",
    "title": "404",
    "body": "404 Page not found!Please use the search bar from the bottom left or visit our homepage! "
    }, {
    "id": 1,
    "url": "http://localhost:4000/0xevilox-blog/privacy-policy",
    "title": "Privacy Policy",
    "body": "Last updated: July 10, 2025 This Privacy Policy describes Our policies and procedures on the collection, use and disclosure of Your information when You use the Service and tells You about Your privacy rights and how the law protects You. We use Your Personal data to provide and improve the Service. By using the Service, You agree to the collection and use of information in accordance with this Privacy Policy. Interpretation and Definitions: Interpretation: The words of which the initial letter is capitalized have meanings defined under the following conditions. The following definitions shall have the same meaning regardless of whether they appear in singular or in plural. Definitions: For the purposes of this Privacy Policy:    Account means a unique account created for You to access our Service or parts of our Service.     Affiliate means an entity that controls, is controlled by or is under common control with a party, where “control” means ownership of 50% or more of the shares, equity interest or other securities entitled to vote for election of directors or other managing authority.     Company (referred to as either “the Company”, “We”, “Us” or “Our” in this Agreement) refers to Programming Tutorials.     Cookies are small files that are placed on Your computer, mobile device or any other device by a website, containing the details of Your browsing history on that website among its many uses.     Country refers to: Tamil Nadu, India     Device means any device that can access the Service such as a computer, a cellphone or a digital tablet.     Personal Data is any information that relates to an identified or identifiable individual.     Service refers to the Website.     Service Provider means any natural or legal person who processes the data on behalf of the Company. It refers to third-party companies or individuals employed by the Company to facilitate the Service, to provide the Service on behalf of the Company, to perform services related to the Service or to assist the Company in analyzing how the Service is used.     Usage Data refers to data collected automatically, either generated by the use of the Service or from the Service infrastructure itself (for example, the duration of a page visit).     Website refers to Programming Tutorials, accessible from https://0xevilox. blogspot. com  You means the individual accessing or using the Service, or the company, or other legal entity on behalf of which such individual is accessing or using the Service, as applicable. Collecting and Using Your Personal Data: Types of Data Collected: Personal Data: While using Our Service, We may ask You to provide Us with certain personally identifiable information that can be used to contact or identify You. Personally identifiable information may include, but is not limited to:  Usage DataUsage Data: Usage Data is collected automatically when using the Service. Usage Data may include information such as Your Device’s Internet Protocol address (e. g. IP address), browser type, browser version, the pages of our Service that You visit, the time and date of Your visit, the time spent on those pages, unique device identifiers and other diagnostic data. When You access the Service by or through a mobile device, We may collect certain information automatically, including, but not limited to, the type of mobile device You use, Your mobile device unique ID, the IP address of Your mobile device, Your mobile operating system, the type of mobile Internet browser You use, unique device identifiers and other diagnostic data. We may also collect information that Your browser sends whenever You visit our Service or when You access the Service by or through a mobile device. Tracking Technologies and Cookies: We use Cookies and similar tracking technologies to track the activity on Our Service and store certain information. Tracking technologies used are beacons, tags, and scripts to collect and track information and to improve and analyze Our Service. The technologies We use may include:    Cookies or Browser Cookies. A cookie is a small file placed on Your Device. You can instruct Your browser to refuse all Cookies or to indicate when a Cookie is being sent. However, if You do not accept Cookies, You may not be able to use some parts of our Service. Unless you have adjusted Your browser setting so that it will refuse Cookies, our Service may use Cookies.     Web Beacons. Certain sections of our Service and our emails may contain small electronic files known as web beacons (also referred to as clear gifs, pixel tags, and single-pixel gifs) that permit the Company, for example, to count users who have visited those pages or opened an email and for other related website statistics (for example, recording the popularity of a certain section and verifying system and server integrity).  Cookies can be “Persistent” or “Session” Cookies. Persistent Cookies remain on Your personal computer or mobile device when You go offline, while Session Cookies are deleted as soon as You close Your web browser. Learn more about cookies on the Free Privacy Policy website article. We use both Session and Persistent Cookies for the purposes set out below: ####  Necessary / Essential Cookies         Type: Session Cookies          Administered by: Us Purpose: These Cookies are essential to provide You with services available through the Website and to enable You to use some of its features. They help to authenticate users and prevent fraudulent use of user accounts. Without these Cookies, the services that You have asked for cannot be provided, and We only use these Cookies to provide You with those services. ####  Cookies Policy / Notice Acceptance Cookies        Type: Persistent Cookies         Administered by: Us Purpose: These Cookies identify if users have accepted the use of cookies on the Website. ####  Functionality Cookies      Type: Persistent Cookies      Administered by: Us Purpose: These Cookies allow us to remember choices You make when You use the Website, such as remembering your login details or language preference. The purpose of these Cookies is to provide You with a more personal experience and to avoid You having to re-enter your preferences every time You use the Website. For more information about the cookies we use and your choices regarding cookies, please visit our Cookies Policy or the Cookies section of our Privacy Policy. Use of Your Personal Data: The Company may use Personal Data for the following purposes:    To provide and maintain our Service, including to monitor the usage of our Service.     To manage Your Account: to manage Your registration as a user of the Service. The Personal Data You provide can give You access to different functionalities of the Service that are available to You as a registered user.     For the performance of a contract: the development, compliance and undertaking of the purchase contract for the products, items or services You have purchased or of any other contract with Us through the Service.     To contact You: To contact You by email, telephone calls, SMS, or other equivalent forms of electronic communication, such as a mobile application’s push notifications regarding updates or informative communications related to the functionalities, products or contracted services, including the security updates, when necessary or reasonable for their implementation.     To provide You with news, special offers and general information about other goods, services and events which we offer that are similar to those that you have already purchased or enquired about unless You have opted not to receive such information.     To manage Your requests: To attend and manage Your requests to Us.     For business transfers: We may use Your information to evaluate or conduct a merger, divestiture, restructuring, reorganization, dissolution, or other sale or transfer of some or all of Our assets, whether as a going concern or as part of bankruptcy, liquidation, or similar proceeding, in which Personal Data held by Us about our Service users is among the assets transferred.     For other purposes: We may use Your information for other purposes, such as data analysis, identifying usage trends, determining the effectiveness of our promotional campaigns and to evaluate and improve our Service, products, services, marketing and your experience.  We may share Your personal information in the following situations:    With Service Providers: We may share Your personal information with Service Providers to monitor and analyze the use of our Service, to contact You.     For business transfers: We may share or transfer Your personal information in connection with, or during negotiations of, any merger, sale of Company assets, financing, or acquisition of all or a portion of Our business to another company.     With Affiliates: We may share Your information with Our affiliates, in which case we will require those affiliates to honor this Privacy Policy. Affiliates include Our parent company and any other subsidiaries, joint venture partners or other companies that We control or that are under common control with Us.     With business partners: We may share Your information with Our business partners to offer You certain products, services or promotions.     With other users: when You share personal information or otherwise interact in the public areas with other users, such information may be viewed by all users and may be publicly distributed outside.     With Your consent: We may disclose Your personal information for any other purpose with Your consent.  Retention of Your Personal Data: The Company will retain Your Personal Data only for as long as is necessary for the purposes set out in this Privacy Policy. We will retain and use Your Personal Data to the extent necessary to comply with our legal obligations (for example, if we are required to retain your data to comply with applicable laws), resolve disputes, and enforce our legal agreements and policies. The Company will also retain Usage Data for internal analysis purposes. Usage Data is generally retained for a shorter period of time, except when this data is used to strengthen the security or to improve the functionality of Our Service, or We are legally obligated to retain this data for longer time periods. Transfer of Your Personal Data Your information, including Personal Data, is processed at the Company’s operating offices and in any other places where the parties involved in the processing are located. It means that this information may be transferred to — and maintained on — computers located outside of Your state, province, country or other governmental jurisdiction where the data protection laws may differ than those from Your jurisdiction. Your consent to this Privacy Policy followed by Your submission of such information represents Your agreement to that transfer. The Company will take all steps reasonably necessary to ensure that Your data is treated securely and in accordance with this Privacy Policy and no transfer of Your Personal Data will take place to an organization or a country unless there are adequate controls in place including the security of Your data and other personal information. Delete Your Personal Data: You have the right to delete or request that We assist in deleting the Personal Data that We have collected about You. Our Service may give You the ability to delete certain information about You from within the Service. You may update, amend, or delete Your information at any time by signing in to Your Account, if you have one, and visiting the account settings section that allows you to manage Your personal information. You may also contact Us to request access to, correct, or delete any personal information that You have provided to Us. Please note, however, that We may need to retain certain information when we have a legal obligation or lawful basis to do so. Disclosure of Your Personal Data: Business Transactions: If the Company is involved in a merger, acquisition or asset sale, Your Personal Data may be transferred. We will provide notice before Your Personal Data is transferred and becomes subject to a different Privacy Policy. Law enforcement: Under certain circumstances, the Company may be required to disclose Your Personal Data if required to do so by law or in response to valid requests by public authorities (e. g. a court or a government agency). Other legal requirements The Company may disclose Your Personal Data in the good faith belief that such action is necessary to:  Comply with a legal obligation Protect and defend the rights or property of the Company Prevent or investigate possible wrongdoing in connection with the Service Protect the personal safety of Users of the Service or the public Protect against legal liabilitySecurity of Your Personal Data: The security of Your Personal Data is important to Us, but remember that no method of transmission over the Internet, or method of electronic storage is 100% secure. While We strive to use commercially acceptable means to protect Your Personal Data, We cannot guarantee its absolute security. Children’s Privacy: Our Service does not address anyone under the age of 13. We do not knowingly collect personally identifiable information from anyone under the age of 13. If You are a parent or guardian and You are aware that Your child has provided Us with Personal Data, please contact Us. If We become aware that We have collected Personal Data from anyone under the age of 13 without verification of parental consent, We take steps to remove that information from Our servers. If We need to rely on consent as a legal basis for processing Your information and Your country requires consent from a parent, We may require Your parent’s consent before We collect and use that information. Links to Other Websites: Our Service may contain links to other websites that are not operated by Us. If You click on a third party link, You will be directed to that third party’s site. We strongly advise You to review the Privacy Policy of every site You visit. We have no control over and assume no responsibility for the content, privacy policies or practices of any third party sites or services. Changes to this Privacy Policy: We may update Our Privacy Policy from time to time. We will notify You of any changes by posting the new Privacy Policy on this page. We will let You know via email and/or a prominent notice on Our Service, prior to the change becoming effective and update the “Last updated” date at the top of this Privacy Policy. You are advised to review this Privacy Policy periodically for any changes. Changes to this Privacy Policy are effective when they are posted on this page. Contact Us: If you have any questions about this Privacy Policy, You can contact us:    By email: vickypentester@gmail. com     By visiting this page on our website: https://0xevilox. github. io/contact  "
    }, {
    "id": 2,
    "url": "http://localhost:4000/0xevilox-blog/about-me",
    "title": "Authors",
    "body": "                                                                                                                                                                                    Evilox:         A curious programmer exploring programming, problem solving, and code design. This blog is a place to learn, discover, and share ideas for those who love to grow.                "
    }, {
    "id": 3,
    "url": "http://localhost:4000/0xevilox-blog/categories",
    "title": "Categories",
    "body": ""
    }, {
    "id": 4,
    "url": "http://localhost:4000/0xevilox-blog/contact",
    "title": "Contact",
    "body": "  Please send your message to 0xevilox. We will reply as soon as possible!   "
    }, {
    "id": 5,
    "url": "http://localhost:4000/0xevilox-blog/",
    "title": "Home",
    "body": "                                                                                               Mastering Functions in C++ with Easy Examples              :               Functions in C++ are essential tools for breaking complex problems into manageable blocks. They help you reuse logic and write cleaner, more efficient code.       :                                                                               Evilox                 14 Jul 2025                                                                                                                           Understanding Bubble Sort: More Than Just Code              :               Understand Bubble Sort like never before! With real-world analogies, dry runs, and detailed logic explained clearly for beginners      :                                                                               Evilox                 12 Jul 2025                                                                                                                           Deep Dive into Pointers Unleashing the Power of C              :               In this blog, we will explore the power of pointers in C      :                                                                               Evilox                 10 Jul 2025                                "
    }, {
    "id": 6,
    "url": "http://localhost:4000/0xevilox-blog/terms-and-conditions",
    "title": "Terms and Conditions",
    "body": "Last updated: July 10, 2025 Please read these terms and conditions carefully before using Our Service. Interpretation and Definitions: Interpretation The words of which the initial letter is capitalized have meanings defined under the following conditions. The following definitions shall have the same meaning regardless of whether they appear in singular or in plural. Definitions: For the purposes of these Terms and Conditions:    Affiliate means an entity that controls, is controlled by or is under common control with a party, where “control” means ownership of 50% or more of the shares, equity interest or other securities entitled to vote for election of directors or other managing authority.     Country refers to: Tamil Nadu, India     Company (referred to as either “the Company”, “We”, “Us” or “Our” in this Agreement) refers to Programming Tutorials.     Device means any device that can access the Service such as a computer, a cellphone or a digital tablet.     Service refers to the Website.     Terms and Conditions (also referred as “Terms”) mean these Terms and Conditions that form the entire agreement between You and the Company regarding the use of the Service. This Terms and Conditions agreement has been created with the help of the Terms and Conditions Generator.     Third-party Social Media Service means any services or content (including data, information, products or services) provided by a third-party that may be displayed, included or made available by the Service.     Website refers to Programming Tutorials, accessible from https://0xevilox. blogspot. com/     You means the individual accessing or using the Service, or the company, or other legal entity on behalf of which such individual is accessing or using the Service, as applicable.  Acknowledgment: These are the Terms and Conditions governing the use of this Service and the agreement that operates between You and the Company. These Terms and Conditions set out the rights and obligations of all users regarding the use of the Service. Your access to and use of the Service is conditioned on Your acceptance of and compliance with these Terms and Conditions. These Terms and Conditions apply to all visitors, users and others who access or use the Service. By accessing or using the Service You agree to be bound by these Terms and Conditions. If You disagree with any part of these Terms and Conditions then You may not access the Service. You represent that you are over the age of 18. The Company does not permit those under 18 to use the Service. Your access to and use of the Service is also conditioned on Your acceptance of and compliance with the Privacy Policy of the Company. Our Privacy Policy describes Our policies and procedures on the collection, use and disclosure of Your personal information when You use the Application or the Website and tells You about Your privacy rights and how the law protects You. Please read Our Privacy Policy carefully before using Our Service. Links to Other Websites: Our Service may contain links to third-party web sites or services that are not owned or controlled by the Company. The Company has no control over, and assumes no responsibility for, the content, privacy policies, or practices of any third party web sites or services. You further acknowledge and agree that the Company shall not be responsible or liable, directly or indirectly, for any damage or loss caused or alleged to be caused by or in connection with the use of or reliance on any such content, goods or services available on or through any such web sites or services. We strongly advise You to read the terms and conditions and privacy policies of any third-party web sites or services that You visit. Termination: We may terminate or suspend Your access immediately, without prior notice or liability, for any reason whatsoever, including without limitation if You breach these Terms and Conditions. Upon termination, Your right to use the Service will cease immediately. Limitation of Liability: Notwithstanding any damages that You might incur, the entire liability of the Company and any of its suppliers under any provision of this Terms and Your exclusive remedy for all of the foregoing shall be limited to the amount actually paid by You through the Service or 100 USD if You haven’t purchased anything through the Service. To the maximum extent permitted by applicable law, in no event shall the Company or its suppliers be liable for any special, incidental, indirect, or consequential damages whatsoever (including, but not limited to, damages for loss of profits, loss of data or other information, for business interruption, for personal injury, loss of privacy arising out of or in any way related to the use of or inability to use the Service, third-party software and/or third-party hardware used with the Service, or otherwise in connection with any provision of this Terms), even if the Company or any supplier has been advised of the possibility of such damages and even if the remedy fails of its essential purpose. Some states do not allow the exclusion of implied warranties or limitation of liability for incidental or consequential damages, which means that some of the above limitations may not apply. In these states, each party’s liability will be limited to the greatest extent permitted by law. “AS IS” and “AS AVAILABLE” Disclaimer: The Service is provided to You “AS IS” and “AS AVAILABLE” and with all faults and defects without warranty of any kind. To the maximum extent permitted under applicable law, the Company, on its own behalf and on behalf of its Affiliates and its and their respective licensors and service providers, expressly disclaims all warranties, whether express, implied, statutory or otherwise, with respect to the Service, including all implied warranties of merchantability, fitness for a particular purpose, title and non-infringement, and warranties that may arise out of course of dealing, course of performance, usage or trade practice. Without limitation to the foregoing, the Company provides no warranty or undertaking, and makes no representation of any kind that the Service will meet Your requirements, achieve any intended results, be compatible or work with any other software, applications, systems or services, operate without interruption, meet any performance or reliability standards or be error free or that any errors or defects can or will be corrected. Without limiting the foregoing, neither the Company nor any of the company’s provider makes any representation or warranty of any kind, express or implied: (i) as to the operation or availability of the Service, or the information, content, and materials or products included thereon; (ii) that the Service will be uninterrupted or error-free; (iii) as to the accuracy, reliability, or currency of any information or content provided through the Service; or (iv) that the Service, its servers, the content, or e-mails sent from or on behalf of the Company are free of viruses, scripts, trojan horses, worms, malware, timebombs or other harmful components. Some jurisdictions do not allow the exclusion of certain types of warranties or limitations on applicable statutory rights of a consumer, so some or all of the above exclusions and limitations may not apply to You. But in such a case the exclusions and limitations set forth in this section shall be applied to the greatest extent enforceable under applicable law. Governing Law: The laws of the Country, excluding its conflicts of law rules, shall govern this Terms and Your use of the Service. Your use of the Application may also be subject to other local, state, national, or international laws. Disputes Resolution: If You have any concern or dispute about the Service, You agree to first try to resolve the dispute informally by contacting the Company. For European Union (EU) Users: If You are a European Union consumer, you will benefit from any mandatory provisions of the law of the country in which You are resident. United States Legal Compliance: You represent and warrant that (i) You are not located in a country that is subject to the United States government embargo, or that has been designated by the United States government as a “terrorist supporting” country, and (ii) You are not listed on any United States government list of prohibited or restricted parties. Severability and Waiver: Severability: If any provision of these Terms is held to be unenforceable or invalid, such provision will be changed and interpreted to accomplish the objectives of such provision to the greatest extent possible under applicable law and the remaining provisions will continue in full force and effect. Waiver: Except as provided herein, the failure to exercise a right or to require performance of an obligation under these Terms shall not affect a party’s ability to exercise such right or require such performance at any time thereafter nor shall the waiver of a breach constitute a waiver of any subsequent breach. Translation Interpretation: These Terms and Conditions may have been translated if We have made them available to You on our Service. You agree that the original English text shall prevail in the case of a dispute. Changes to These Terms and Conditions: We reserve the right, at Our sole discretion, to modify or replace these Terms at any time. If a revision is material We will make reasonable efforts to provide at least 30 days’ notice prior to any new terms taking effect. What constitutes a material change will be determined at Our sole discretion. By continuing to access or use Our Service after those revisions become effective, You agree to be bound by the revised terms. If You do not agree to the new terms, in whole or in part, please stop using the website and the Service. Contact Us: If you have any questions about this Privacy Policy, You can contact us:    By email: vickypentester@gmail. com     By visiting this page on our website: https://0xevilox. blogspot. com/p/contact-us. html  "
    }, {
    "id": 7,
    "url": "http://localhost:4000/0xevilox-blog/robots.txt",
    "title": "",
    "body": "      Sitemap: {{ “sitemap. xml”   absolute_url }}   "
    }, {
    "id": 8,
    "url": "http://localhost:4000/0xevilox-blog/cpp-functions-tutorial-types-examples-overloading/",
    "title": "Mastering Functions in C++ with Easy Examples",
    "body": "2025/07/14 - Hey Guys, Welcome to this blog. Today We’re going to talk about functions in C++  What is functions ? How they work ? How you use them to solve the problems in C++What is function in C++?: Function is a term that came from the mathematics. For example: f(x) = x^2 + 2Here x = 2;f(2) = 2^2 + 2 = 4 + 2 = 6Here x is parameter. you get value x from the user, and the function computes result based on the value. In Programming, it’s similar - but not all function need to compute the value. Some just perform actions without returing anything. Example: Print a Message Using a Function: #include &lt;iostream&gt;using namespace std;void printhappybirthday(void){  cout &lt;&lt;  Happy birthday evilox  &lt;&lt; endl; // it just print without returning anything}int main(void){  printhappybirthday(); //calling the function}The above function doesn’t compute the value. just print the birthday message. In C++, a function is a series of the statement that is grouped together and given name to the function.  Why use functions in C++?:  To reuse code, so you don’t write the code agian and agian.  To break big program into smaller manageable parts. Types of functions?: There are two types of functions: 1. Standard library functions:  Standard library functions are built-in function and pre-defined function provided by the C++ language.  Examples:     sqrt()   strlen()   sizeof()   tolower()   toupper()   2. User-defined functions:  User-defined functions are custom function created by programmers to solve the specific problem.    These helps programmer to organize code and make it reusable.   These all are components to built the custom function:     return-type   function_name   parameters (optional)   function body   return   How to write the function in C++?: return-type function_name(parameters){				//function body} return-type: This is the type of the data the function will return at end.      Common return type:       Integer types: short,int,long.    Floating types: float,double.    Character: char   Boolean: bool   String: string      function_name: This is the name given to function. Which need be unique and descriptive.     parameters: parameters are dummy variable which helps us to take the input. (optional)   Function body: Function body the series of the statements and declaration which used inside the fuction. Rules for the functions return type:  You cannot return the array in the function and there are no other restriction Specifying the return type is void means you cannot return anything. Writing a Function in C++: #include &lt;iostream&gt;using namespace std;int add(int a, int b) // accepting the a and b parameter{	return a + b; // returing the integer}int main(void){  int addnum = add(12,24); //calling the function and store in the addnum variable  cout &lt;&lt; addnum &lt;&lt; endl;} In the above example:  return type: int function name: add parameters: a and b with there type return the integers a + b =&gt; resultSolving Real Problem: Factorial Using Function: Find the factorial of given number:: First, understand what a factorial is. In mathematics,a factorial is the product of all integers less than or equal to a non-negative integers. (the symbol is !)For example:5! = 5 * 4 * 3 * 2 * 1 = 120So here, we can clearly see that numbers loop from 1 to n. Alogrithm:: Step 1: Get the input from the user (i. e n &gt; 1). Step 2: Create a variable to store the product (i. e factorial = 1). Step 3: Loop from 1 to n and multiply the number, storing the result in factorial. Step 4: Return value at the end (i. e return factorial). #include &lt;iostream&gt;using namespace std;int find_factorial(int n){  if(n &lt; 1)  {    cout &lt;&lt;  Invalid number  &lt;&lt; endl;    return -1;  }  int factorial = 1;    for(int i = 1; i &lt;= n; i++)  {    factorial *= i;  }    return factorial;}int main(void){  int num = 0;  cout &lt;&lt;  Enter a number:  ;  cin &gt;&gt; num;  cout &lt;&lt; find_factorial(num) &lt;&lt; endl;  return 0;} How Does This Function Work?: In the main function,you get input from user using cin and store the value in num variable. Then you pass num to the function named find_factorial. Inside that function:  It first check wheather the n &gt; 1 if it not it print invalid number and stop that function Then calcuate the factorial using the for loop and store the result in the factorial variable.  Finally,it returns the factorial at end of the function. C++ Functions Consist of Three Parts::  Function Declaration: Define the function before using the function in our program which tells the compiler about function name,return type, and parameter. (it required if writing the function below main) and this called function prototype. #include &lt;iostream&gt;using namespace std;int find_factorial(int n); //Function Declarationint main(void){  // main function  return 0;}int find_factorial(int n){  // write the program for factorial} Function Definition: Function is body of function or your actual codeint find_factorial(int n){  // Function Definition} Function Call: This is when you use or invoke the function in your main program#include &lt;iostream&gt;using namespace std;int find_factorial(int n);int main(void){  int num = 0;  cout &lt;&lt;  Enter a number:   &lt;&lt; endl;  cin &gt;&gt; num;  find_factorial(num); // Function Call or Calling the function  return 0;}int find_factorial(int n){  // write the program for factorial}Function Parameter and Argument in C++: Parameter are dummy variable hold the value passed by the arguments. Arguments are the actual value you give when you calling the function. So basically parameter receive the data and argument send the data. Default parameters:: Default parameters when no value passed during the function call. if you don’t provide the argument, while calling the function default parameters used automatically. #include &lt;iostream&gt;using namespace std;int find_factorial(int n = 2); // default parametersint main(void){  int num = 0;  cout &lt;&lt;  Enter a number:  ;  cin &gt;&gt; num;  cout &lt;&lt; find_factorial() &lt;&lt; endl;  return 0;}int find_factorial(int n = 2) // default parameters{  // factorial program}Rules for arguments: 1. Implicit Conversion: If you define the parameter as one type (eg: integer type) but pass a different type (eg: floating point) value and vice versa. C++ automically convert one type to other type (eg: here float to int (lose the point value)). #include &lt;iostream&gt;using namespace std;int add(int a, int b);int main(void){  float i = 12. 3;  float j = 13. 2;  cout &lt;&lt; add(i,j) &lt;&lt; endl;  return 0;}int add(int a, int b){  return a + b;} 2. Default arguments promotion: When you passing the small datatype values it get automatically convert:  float is promoted to double char and short are promoted to intint getNum(int a) // implict type conversion (default promotion){  return a; }int main(void){  char a = 'A';  cout &lt;&lt; getNum(a); &lt;&lt; endl; // implict type conversion (default promotion)  return 0;}Function Overloading in C++: Function Overloading is language feature provide by C++. It allow you to define multiple function with the same name but different parameters size or different type of the parameter. If the you need overload the function you need follow two step:  Set different parameter for the function. (Multiple dummy variable). int add(int a, int b) // 2 parameters{  return a + b;}int add(int a, int b, int c) // 3 parameters{  return a + b + c;} Set different datatype or size of datatype for the parameter. int add(int a, int b){  return a + b;}float add(float a, float b){  return a + b;}Use Case: Area Calculation Using Function Overloading: Find the area of the rectange and square Since these concepts are already covered in school, I won’t explain them in detail here. #include &lt;iostream&gt;using namespace std;// Area of rectangeint area(int l, int b){  return l * b;}// Area of squarefloat area(int l){  return l * l;}int main(void){  int l = 12;  int b = 7;  cout &lt;&lt; area(l) &lt;&lt; endl;  cout &lt;&lt; area(l,b) &lt;&lt; endl;  return 0;} Final Thoughts on C++ Functions:: So, I hope you understand how function in C++ Works and we explored what functions are, how to write them, type of functions, function overloading and solving the problem using the functions in C++ Functions help you reuse code, organize logic, and make programs more readable. Enjoyed this article?Support the content by buying a coffee ☕ Happy coding! 💻 "
    }, {
    "id": 9,
    "url": "http://localhost:4000/0xevilox-blog/bubble-sort-explained-for-beginners/",
    "title": "Understanding Bubble Sort: More Than Just Code",
    "body": "2025/07/12 - Introduction: Hey guys, welcome to my blog! This is actually my first post in the problem-solving series. In this post, we’re going to look at a sorting algorithm called Bubble Sort. Now wait — I know you’ve already seen bubble sort in many tutorials. But here, I want to share it in a different way:  How to think about the logic How it works step by step How to optimize the code Why do we do that? How to understand it mathematically. Before diving into the bubble sort, there’s something important. We need to understand computer science. Computer science is the study of information – how it’s represented and how it’s computed. Why are we learning the bubble sort and all these basic algorithms?: Because bubble sort is one of the fundamental algorithms in computer science. So, What is an algorithm?: The algorithm is a very, very precise set of instructions designed to solve a computational problem. It takes a set of inputs to produce a set of outputs within a finite amount of time. And algorithms aren’t just for computers. We actually use algorithms in our daily lives, too. Daily Life Analogy of Algorithms: For example: How do you brush your teeth?  You walk to the bathroom You take the brush and rinse it in the sink Then you apply the toothpaste and brush your teethPrecise vs Vague Instructions: But if you notice, these steps are vague. I haven’t given the precise instruction because you use your common sense, but computers don’t. Computers are literally dumb. They need precise, not only just precise, but very accurate instructions. If you don’t give the extract steps, the program crashes. How does the precise algorithm look?: For example: How do you teach your computer to brush your teeth?  Wake up from bed Walk a few steps to reach the bathroom Take the toothbrush and toothpaste from the left corner shelf Rinse the brush in the sink Apply the toothpaste to the brush Close your toothpaste Brush your teeth:     Upper teeth 4 times   lower teeth 4 times, etc. .     Rinse your mouth with water Rinse toothbrush Return the toothbrush and toothpaste to the shelf DoneSo this precise algorithm looks like But even here, I’ve left out a few important steps. What if you didn’t close the bathroom door?: Someone might walk in and interrupt you – that’s an unexpected behavior. In Programming, we call that a bug – when your program doesn’t handle a certain situation correctly and ends up doing something wrong or even crashing. Why am I saying all this to you?: Because you need to think, not just memorize. Don’t just blindly cram bubble sort for a random tech interview. Instead, understand what it actually is–how it works, why it matters, and what it teaches you about problem-solving. What is Bubble Sort?: Bubble Sort is a simple sorting algorithm that compares pairs of adjacent elements and swaps them if they are in the wrong order. This process will be repeated until the array is sorted either in increasing or decreasing order. Bubble Sort Analogy: Imagine in the school, the students are standing in a prayer line or something like a class photo. The teacher wants to arrange the students in order based on height. If someone is shorter, they will go in front. Someone is the tallest they will go back. This will be repeated until the shortest student goes forward and the tallest student goes backward. In each round, the tallest student “bubbles up” to the end like a bubble rising to the surface in water. How does it work?:  First, let’s take the unsorted data from the user, for example: {6,4,5,3,2,1}; Next, compare a pair of adjacent elements; if the first is larger than the second element, swap the elements. i. e, if aj &gt; aj+1, then swap aj and aj+1.  Repeat until the array is sorted. It looks simple, right? Let’s briefly explain how bubble sort works. First, let take the unsorted data: {6,4,5,3,2,1}. To sort this list using bubble sort, we need to compare and swap the elements repeatedly until the entire list is in order. Do we need to use the loop?: In this case, we use two loops: one is the outer loop and the other is the inner loop. The outer loop iterates over the elements multiple times, while the inner loop performs the comparisons. Why are we using the two loops?: Because we need to compare each and every element, if we use a single loop, only one element gets sorted; the others do not get sorted. Let’s start with iteration. In the first iteration, where i = 0 and i &lt; n, we start comparing elements from the beginning. Let’s go through the first pass of the bubble sort step by step using the list: We start with i = 0 (first iteration), and we’ll compare each pair of neighboring elements using an inner loop. You may be wondering what j and j + 1 are. Basically, j represents the current element, and j + 1 is the neighboring element that it’s being compared with.  Compare 6 and 5     Since 6 is greater than 5, swap the elements.     Compare 6 and 4     Since 6 is greater than 4, swap the elements.     Compare 6 and 3     Since 6 is greater than 3, swap the elements.     Compare 6 and 2     Since 6 is greater than 2, swap the elements.     Compare 6 and 1     Since 6 is greater than 1, swap the elements.    Now you can clearly see that the largest element moves towards the end, just like a bubble rising to the surface (when you boil the water). That’s why it’s called bubble sort. Next, we move to the second iteration, i = 1 In the second iteration, we take the list {5,4,3,2,1,6}, which is the result after the first iteration. Here, you can clearly see that the last number will largest. So, in every iteration, the biggest number goes to the last. Let’s start the second iteration.  Compare 5 and 4.      Since 5 is greater than 4, swap the elements.     Compare 5 and 3.      Since 5 is greater than 3, swap the elements.     Compare 5 and 2.      Since 5 is greater than 2, swap the elements.     Compare 5 and 1     Since 5 is greater than 1, swap the elements.    In this case, we don’t compare the 5 and 6 because 6 is already in its correct (sorted) position. To avoid comparing with elements that are already sorted at the end of the list, we use the condition j &lt; n-i-1 in the inner loop. This condition ensures that with each iteration of the outer loop (i), we reduce the number of comparisons, since the largest elements have already “bubbled up to the end. For example:  In the first iteration, i = 0 so the condition becomes j &lt; n - 0 - 1 -&gt; j &lt; n - 1.  In the second iteration, i = 1, so the condition becomes j &lt; n - 1 - 1 -&gt; j &lt; n - 2. In a nutshell, this condition helps to avoid unnecessary comparison within the elements that are already sorted at the end of the list. With each pass, the biggest number settles in place, so the inner loop doesn’t need to check those again. For example: {5,4,3,2,1,6}, where n = 6; So n-2 = 4, meaning the inner loop only checks up to the 4 index and doesn’t compare with the already sorted 6 at the end. This is a simple form of optimization in bubble sort. In the third iteration, we take the list {4,3,2,1,5,6}, which is the result after the second iteration. Next, in the third iteration.  Compare 4 and 3     Since 4 is greater than 3, swap the elements.     Compare 4 and 2.      Since 4 is greater than 2, swap the elements.     Compare 4 and 1.      Since 4 is greater than 1, swap the elements.    In the fourth iteration, we take the list {3,2,1,4,5,6}, which is the result after the third iteration. Next, we compare the elements again in the fourth iteration  Compare 3 and 2     Since 3 is greater than 2, swap the elements.     Compare 3 and 1     Since 3 is greater than 1, swap the elements.    In the fifth iteration, we take the list {2,1,3,4,5,6}, which is the result after the fourth iteration. In the fifth iteration.  Compare 2 and 1     Since 2 is greater than 1, swap the elements.    Now your array has been successfully sorted. After there is no swap, the loop gets terminated, and you get the sorted array or list. Final Thoughts:: So that’s how bubble sort works. I hope you now understand this algorithm better. In the next post, we’ll see how to implement it, analyze its performance, and explore ways to optimize the code. I also hope this post didn’t just explain what bubble sort is, but also gave you a clearer idea of what an algorithm is and how to think about problem-solving. Remember, a learning algorithm isn’t about memorizing steps or rushing to pass an interview. It’s about building your problem-solving mindset and understanding how computers really work. “Enjoyed this guide? You can support me on Buy Me a Coffee — it helps me keep writing practical tutorials like this.  Thanks for reading and happy coding…………………………💻 "
    }, {
    "id": 10,
    "url": "http://localhost:4000/0xevilox-blog/deep-dive-into-pointer/",
    "title": "Deep Dive into Pointers Unleashing the Power of C",
    "body": "2025/07/10 - Deep Dive into Pointers: Unleashing the Power of CIntroduction: Hey Guys, Welcome to this blog! In this blog we’re going to learn about the basics of a pointer and how to use a pointer in C. We’ll also look at the history behind pointers, why we use them, and some common pitfalls to avoid. So let’s dive deep into the world of pointers! What is Pointer?: Pointer is nothing but a variable that stores the memory address of another variable or object Woooo! What does that mean?Before diving into the pointer, we need to understand some basics about how memory works and represented in under the hood. Before moving on to that, what is Computer Science?Computer Science is all about the study information,computation, and how information is represented, right?Information represented in the memory as the binary form for eg:int x = 10;How would this been respresented in the memory? 000001010Because computers understand only 0s and 1s, everything you see on the computer screen is just information represented in the binary form in memory. In modern computers, memory(RAM) is divided into the bytes, which are capable of the storing eight bits of information. Each bytes has the unique address. For example, if there are x numbers of memory in the computer, the range would be from 0 to x - 1 How they came up with this idea?: So, in this case, every byte has a unique address. This mean if we get the address, we can manipulate the data directly. This idea is actually present in the CPU registers. if you take a look at the registers, there’s something called EIP (Extended instruction pointer) in 32-bit system or RIP (Register instruction pointer) in 64-bit system. These works exactly like pointers they take the address of current instruction and process in the CPU. So, you could think of RIP as a pointer. This is where the pointer is capable of storing the memory address of the another variable or object. How to use a Pointer in C ?: Declaring a pointer: To declare a pointer in C, we need to specify the datatype, followed by an asterisk, and then the name of the variable. datatype *variablenameeg:  int *ptr; // declaring an uninitialized pointer Address of operator: Next, we need to point to an object Here, the object refers to a region of memory or the address of another variable. To get the address of another variable we need use the &amp; operator. #include &lt;stdio. h&gt;int main(void){  int a = 12;  int *ptr = &amp;a; // Getting the address of the another variable or object} Note An integer pointer can only points to an integer, not a float,char etc. if it points to a different size of integer, it could lead to loss of value. To avoid this, you need to use type casting or pointer type casting eg: (int *) int *ptr; // points to an integer object float *ptr; // points to a float object char *ptr; // points to a char objectIndirection/dereference operator: Indirection or dereferencing goes to the address and fetches the value. #include &lt;stdio. h&gt;int main(void){  int a = 12;  int *ptr = &amp;a;  printf( the value ptr %d\n ,*ptr); // dereferencing the value // print 12 }Output: Note: Don’t confuse with reference and dereference, as both may look similar at times. By using the dereference operator, we can also reassign the value. #include &lt;stdio. h&gt;int main(void){  int a = 12;  int *ptr = &amp;a; // assign the value to the pointer   *ptr = 32; // dereference and assign the value }Now both a and ptr has the same value. So, if change for one, it will affect the other because you are directly manipulating the memory and here the a points to the ptr. Pointer Assignment: C allows us to assign one pointer to another pointer which copies the value(address) stored in the original pointer. #include &lt;stdio. h&gt;int main(void){  int i = 12;  int *ptr;  int *htr;  ptr = &amp;i;  htr = ptr;  printf( The address of ptr %p\n ,ptr);  printf( The address of htr %p\n ,htr);}In this code, if you take a look, both ptr and htr have same address that of i which they point to. Now both point to same address if change any one of the value it affect 2 object i,ptr. #include &lt;stdio. h&gt;int main(void){  int i = 12;  int *ptr;  int *htr;  ptr = &amp;i;  *htr = 100;  printf( The value of i %d\n ,i);  printf( The value of ptr %d\n ,*ptr);}Output: Why do we use a pointer?: So far, we’ve seen how to use a pointer. now we’re going to see why we use a pointer and where to use the pointer. Passing a pointer as an argument: In general, if you take a look at a function parameter, it usually takes the value as a deep copy or just makes a copy of the value and stores it in a local variable,like a in this case Because it protects the value from been changed. #include &lt;stdio. h&gt;void modify(int a){  a = 32;}int main(void){  int a = 12;  modify(a);  printf( the value of a: %d\n ,a);  return 0;}In the above code, will the value of a change if we print it after the function call? Simply, no. Output: But if we use a pointer, it directly manipulates the memory,allowing us to change the value without needing to return it. The modified value is stored in the same variable. #include &lt;stdio. h&gt;void modify(int *a) // accepting the parameter as pointer{  *a = 32; // dereferencing the variable }int main(void){  int a = 12;  modify(&amp;a); // passing the address   printf( the value of a: %d\n ,a);  return 0;}Note: Don’t confuse with referencing and dereferencing both look same in this case. Output: Pointer for Problem-solving (Math Problem): Let’s use pointer for problem solving, specifically math problem. We are given an array, and your task is to find the maximum and minimum values using a void function. Enter a 10 number: 82 42 102 94 23 11 50 31 49 10Largest: 102Smallest: 10#include &lt;stdio. h&gt;#include &lt;limits. h&gt;#define MAX 10void findMaxandMin(int arr[], int n,int *max, int *min){  *max = INT_MIN;  *min = INT_MAX;  for(int i = 0; i &lt; MAX; i++)  {    if(arr[i] &gt; *max)    {      *max = arr[i];    }    else    {      *min = arr[i];    }  }}int main(void){  int largest,smallest;  int arr[MAX];  printf( Enter %d numbers:  ,MAX);  for(int i = 0; i &lt; MAX; i++)  {    scanf( %d ,&amp;arr[i]);    }  findMaxandMin(arr,MAX,&amp;largest,&amp;smallest);  printf( Largest %d\n ,largest);  printf( Smallest %d\n ,smallest);  return 0;}Output: So yeah, that’s the power of pointers in C! And this is just the basics we only scratched the surface. There lot more cool stuff coming up with the next blog, like array vs pointer etc… If you liked this post, feel free to subscribe to my blog for more content like this and if found it would be helpful, consider donating to support my work. Every bit helps and keeps me motivated Just Buy me some coffee ☕! Thanks for reading and happy coding…………………………💻 "
    }];

var idx = lunr(function () {
    this.ref('id')
    this.field('title')
    this.field('body')

    documents.forEach(function (doc) {
        this.add(doc)
    }, this)
});
function lunr_search(term) {
    document.getElementById('lunrsearchresults').innerHTML = '<ul></ul>';
    if(term) {
        document.getElementById('lunrsearchresults').innerHTML = "<p>Search results for '" + term + "'</p>" + document.getElementById('lunrsearchresults').innerHTML;
        //put results on the screen.
        var results = idx.search(term);
        if(results.length>0){
            //console.log(idx.search(term));
            //if results
            for (var i = 0; i < results.length; i++) {
                // more statements
                var ref = results[i]['ref'];
                var url = documents[ref]['url'];
                var title = documents[ref]['title'];
                var body = documents[ref]['body'].substring(0,160)+'...';
                document.querySelectorAll('#lunrsearchresults ul')[0].innerHTML = document.querySelectorAll('#lunrsearchresults ul')[0].innerHTML + "<li class='lunrsearchresult'><a href='" + url + "'><span class='title'>" + title + "</span><span class='body'>"+ body +"</span><span class='url'>"+ url +"</span></a></li>";
            }
        } else {
            document.querySelectorAll('#lunrsearchresults ul')[0].innerHTML = "<li class='lunrsearchresult'>No results found...</li>";
        }
    }
    return false;
}

function lunr_search(term) {
    $('#lunrsearchresults').show( 400 );
    $( "body" ).addClass( "modal-open" );
    
    document.getElementById('lunrsearchresults').innerHTML = '<div id="resultsmodal" class="modal fade show d-block"  tabindex="-1" role="dialog" aria-labelledby="resultsmodal"> <div class="modal-dialog shadow" role="document"> <div class="modal-content"> <div class="modal-header" id="modtit"> <button type="button" class="close" id="btnx" data-dismiss="modal" aria-label="Close"> &times; </button> </div> <div class="modal-body"> <ul class="mb-0"> </ul>    </div> <div class="modal-footer"><button id="btnx" type="button" class="btn btn-primary btn-sm" data-dismiss="modal">Close</button></div></div> </div></div>';
    if(term) {
        document.getElementById('modtit').innerHTML = "<h5 class='modal-title'>Search results for '" + term + "'</h5>" + document.getElementById('modtit').innerHTML;
        //put results on the screen.
        var results = idx.search(term);
        if(results.length>0){
            //console.log(idx.search(term));
            //if results
            for (var i = 0; i < results.length; i++) {
                // more statements
                var ref = results[i]['ref'];
                var url = documents[ref]['url'];
                var title = documents[ref]['title'];
                var body = documents[ref]['body'].substring(0,160)+'...';
                document.querySelectorAll('#lunrsearchresults ul')[0].innerHTML = document.querySelectorAll('#lunrsearchresults ul')[0].innerHTML + "<li class='lunrsearchresult'><a href='" + url + "'><span class='title'>" + title + "</span><small><span class='body'>"+ body +"</span><span class='url'>"+ url +"</span></small></a></li>";
            }
        } else {
            document.querySelectorAll('#lunrsearchresults ul')[0].innerHTML = "<li class='lunrsearchresult'>Sorry, no results found. Close & try a different search!</li>";
        }
    }
    return false;
}
    
$(function() {
    $("#lunrsearchresults").on('click', '#btnx', function () {
        $('#lunrsearchresults').hide( 5 );
        $( "body" ).removeClass( "modal-open" );
    });
});